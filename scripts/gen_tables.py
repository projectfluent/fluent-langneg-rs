import sys
import re
import codecs

import xml.etree.ElementTree as ET

def gen_tables(filename, outfile):
    o = codecs.open(outfile, 'w', 'utf-8')
    tree = ET.parse(filename)
    root = tree.getroot()
    assert(root.tag == 'supplementalData')
    entries = []
    for child in root:
        if child.tag == 'likelySubtags':
            for subtag in child:
                fr, to = subtag.attrib['from'], subtag.attrib['to']
                if len(to.split('_')) != 3:
                    print('Unexpected "to" string: ' + to)
                    exit(1)
                entries.append((fr, to.replace('_', '-')))
    lang_re = re.compile('([a-z]+)$')
    lang_only = []
    lang_reg_re = re.compile('([a-z]+)_([A-Z]+|[0-9]+)$')
    lang_reg = []
    lang_script_re = re.compile('([a-z]+)_([A-Z][a-z]+)$')
    lang_script = []
    script_region_re = re.compile('und_([A-Z][a-z]+)_([A-Z]+|[0-9]+)$')
    script_region = []
    for (fr, to) in entries:
        m = lang_re.match(fr)
        if m:
            lang = m.group(1)
            if lang == 'und': lang = ''
            lang_only.append((tag_to_hex(lang), to))
            continue
        m = lang_reg_re.match(fr)
        if m:
            lang = m.group(1)
            region = m.group(2)
            if lang == 'und': lang = ''
            tag = tag_to_hex(lang) | (tag_to_hex(region) << 32)
            lang_reg.append((tag, to))
            continue
        m = lang_script_re.match(fr)
        if m:
            lang = m.group(1)
            script = m.group(2)
            if lang == 'und': lang = ''
            tag = tag_to_hex(lang) | (tag_to_hex(script) << 32)
            lang_script.append((tag, to))
            continue
        m = script_region_re.match(fr)
        if m:
            script = m.group(1)
            region = m.group(2)
            tag = tag_to_hex(script) | (tag_to_hex(region) << 32)
            script_region.append((tag, to))
            continue
        print('Unexpected "from" string: ' + fr)
        exit(1)
    o.write("""// This file was automatically generated by gen_tables.py.
// It is derived from likelySubtags.xml from CLDR (http://cldr.unicode.org/)

// That file contains the following copyright notice:

// Copyright Â© 1991-2018 Unicode, Inc.
// For terms of use, see http://www.unicode.org/copyright.html
// Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.

""")
    print_table('LANG_ONLY', "(u32, &'static str)", lang_only, o)
    print_table('LANG_REGION', "(u64, &'static str)", lang_reg, o)
    print_table('LANG_SCRIPT', "(u64, &'static str)", lang_script, o)
    print_table('SCRIPT_REGION', "(u64, &'static str)", script_region, o)

def print_table(name, ty, data, o):
    data.sort()
    o.write('pub const ' + name + ': [' + ty + '; ' + str(len(data)) + '] = [\n')
    for fr, to in data:
        o.write('    (' + hex(fr) + ', "' + to + '"),\n')
    o.write('];\n')

def main(args):
    if len(args) < 2:
        print("Usage: python3 gen_tables.py likelySubtags.xml table.rs")
        exit(1)
    filename = args[1]
    outfile = args[2]
    gen_tables(filename, outfile)

def tag_to_hex(tag):
    result = 0
    for i, c in enumerate(tag):
        result += ord(c) << (i * 8)
    return result

main(sys.argv)
